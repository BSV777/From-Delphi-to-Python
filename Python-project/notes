
# <Button left="10"; top="10"; bottom="100"; right="100"; Caption="Press me!">
# <Label left="110"; top="110"; bottom="200"; right="200"; Text="Look at me!">


Если элементы списка вводяться в одной строке, разделенные пробелами, то можно использовать метод строки split(), возвращающий список строк, разрезав исходную строку на части по пробелам. Пример:
A = input().split()
Если при запуске этой программы ввести строку 1 2 3, то список A будет равен [‘1’, ‘2’, ‘3’]. 
Используя функции языка map и list то же самое можно сделать в одну строку:
A = list(map(int, input().split()))
Если нужно считать список действительных чисел, то нужно заменить тип int на тип float.
У метода split есть необязательный параметр, который определяет, какая строка будет использоваться в качестве разделителя между элементами списка. Например, метод split(‘.’) вернет список, полученный разрезанием исходной строки по символам ‘.’. 

----------------------------------------------------------------------------
Функция Copy ( S; Index, Count: Integer ): string;

Функция возвращает подстроку или сегмент массива размером Count, начиная с элемента S[Index].
Параметр S - выражение типа string или динамический массив. Если Index>Length(S), то функция возвращает пустую строку или пустой массив.
Если значение параметра Count больше, чем может быть возвращено функцией, то возвращаются символы или элементы, начиная с S[Index] и до конца S.


Срез (slice) — извлечение из данной строки одного символа или некоторого фрагмента (подстроки).
Есть три формы срезов. Самая простая форма среза: взятие одного символа строки, а именно, S[i] — это срез, состоящий из одного символа, который имеет номер i, при этом считая, что нумерация начинается с числа 0. То есть если S = ‘Hello’, то S[0]=='H', S[1]=='e', S[2]=='l', S[3]=='l', S[4]=='o'.
Номера символов в строке (а также в других структурах данных: списках, кортежах) называются индексом. 
Если указать отрицательное значение индекса, то номер будет отсчитываться с конца, начиная с номера -1. То есть
S[-1]=='o', S[-2]=='l', S[-3]=='l', S[-4]=='e', S[-5]=='H'.

Срез с двумя параметрами: S[a:b] возвращает подстроку из b-a символов, начиная с символа c индексом a, то есть до символа с индексом b, не включая его. Например, S[1:4]==‘ell’, то же самое получится если написать S[-4:-1]. Можно использовать как положительные, так и отрицательные индексы в одном срезе, например, S[1:-1] — это строка без первого и последнего символа (срез начинается с символа с индексом 1 и заканчиватеся индексом -1, не включая его). 
При использовании такой формы среза ошибки IndexError никогда не возникает. Например, срез S[1:5] вернет строку ‘ello’, таким же будет результат, если сделать второй индекс очень большим, например, S[1:100] (если в строке не более 100 символов).
Если опустить второй параметр (но поставить двоеточие), то срез берется до конца строки. Например, чтобы удалить из строки первый символ (его индекс равен 0, то есть взять срез, начиная с символа с индексом 1), то можно взять срез S[1:], аналогично если опустить первый параметр, то срез берется от начала строки. То есть удалить из строки последний символ можно при помощи среза S[:-1]. Срез S[:] совпадает с самой строкой S.

L1=Copy(L1,1,Pos('"',L1)-1)	L1 = L1[:L1.find('"') - 1]
LWork=Copy(LWork,1,n)		LWork = LWork[:n]

----------------------------------------------------------------------------

Функция Delete (
var S: string;
Index, Count: Integer );

Процедура удаляет подстроку, содержащую Count символов из строки S. Подстрока начинается в S[Index].
Параметр Index определяет индекс первого символа удаляемой подстроки. Первый символ в строке имеет индекс 1. 

Delete(L1,1,n+7)				L1 = L1[:n + 7]
Delete(L1,1,Pos('caption',LowerCase(L1))+6)	L1 = L1[:L1.lower().find('caption') + 6]
Delete(L1,1,Pos('height="',LowerCase(L1))+7)	L1 = L1[:L1.lower().find('height="') + 7]
Delete(L1,1,Pos('"',L1))			L1 = L1[:L1.lower().find('"')]
Delete(L1,1,Pos('left="',LowerCase(L1))+5)	L1 = L1[:L1.lower().find('left="') + 5]
Delete(L1,1,Pos('text',LowerCase(L1))+3)	L1 = L1[:L1.lower().find('text') + 3]
Delete(L1,1,Pos('top="',LowerCase(L1))+4)	L1 = L1[:L1.lower().find('top="') + 4]
Delete(L1,1,Pos('width="',LowerCase(L1))+6)	L1 = L1[:L1.lower().find('width="') + 6]
Delete(LWork,1,n-1)				LWork = LWork[:n - 1]
Delete(LWork,n,1)				LWork = LWork[n - 1:n]
Delete(LWork,n+1,1)				LWork = LWork[n:n + 1]

-----------------------------------------------------------------------------
Функция Pos ( Substr: string; S: string ): Integer;

Функция находит подстроку Substr в строке S и возвращает ин-декс первого символа найденной подстроки. Если S не содержит указанную подстроку, то функция возвращает 0.

Методы find и rfind
Метод find находит в данной строке (к которой применяется метод) данную подстроку (которая передается в качестве параметра). Функция возвращает индекс первого вхождения искомой подстроки. Если же подстрока не найдена, то метод возвращает значение -1. 
S.find('e')
Аналогично, метод rfind возвращает индекс последнего вхождения данной строки (“поиск справа”).
Если вызвать метод find с тремя параметрами S.find(T, a, b), то поиск будет осуществляться начиная с символа с номером a до символа с номером b (не включительно). Если указать только два параметра S.find(T, a), то поиск будет осуществляться, начиная с a-го элемента до конца строки. Метод S.find(T, a, b) возвращает индекс в строке S, а не индекс относительно начала среза.

ifPos('<button',LowerCase(LWork))<>0: 		if LWork.lower().find('<button') <> -1:
ifPos('<label',LowerCase(LWork))<>0:		if LWork.lower().find('<label') <> -1:
ifPos('<textedit',LowerCase(LWork))<>0:		if LWork.lower().find('<textedit') <> -1:
n=Pos('caption="',LowerCase(LWork))		n = LWork.lower().find('caption="')
n=Pos('height="',LowerCase(LWork))		n = LWork.lower().find('height="')
n=Pos('left="',LowerCase(LWork))		n = LWork.lower().find('left="')
n=Pos('<',LWork)				n = LWork.find('<')
n=Pos('>',LWork)				n = LWork.find('>')
n=Pos('',LWork)					n = LWork.find('')
n=Pos('textedit',LowerCase(L1))			n = L1.lower().find('textedit')
n=Pos('text="',LowerCase(LWork))		n = LWork.lower().find('text="')
n=Pos('top="',LowerCase(LWork))			n = LWork.lower().find('top="')
n=Pos('width="',LowerCase(LWork))		n = LWork.lower().find('width="')


